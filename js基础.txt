一、刚开始接触的js就是script标签包裹的各种变量，语句，数组，函数，对象等，也可以通过script标签src外部引入js文件——这个时候就是简单的js，培养编程思维


1.注释

/*多行注释 使用多行注释的时候要注意嵌套问题*/
    ctrl + / 单行注释
    ctrl + shift + / 多行注释

2.<!--async 异步 异步加载 加载完成后立即执行-->
  <!--defer 推迟 异步加载 页面全部加载完成后最后执行-->
  <script src="test.js" async="async"></script>
  <script src="test.js" defer="defer"></script>

3.变量命名
  字母、数字、下划线、$符都可以用，但是不能以数字开头，不能使用关键字和保留字，区分大小写

4.变量声明合写以及声明和赋值的合写
  var a, b, c;//声明合写
  var num1 = 1, num2 = 2, num3 = 3;//声明和赋值合写

5.number的进制
  //01234567 用八个符号表示所有的值
  var b = 010;//八进制

  //0123456789abcdef 用十六个符号表示所有的值 十六进制
  var c = 0x10;

  //科学计数法：浮点数：浮点数的精度是有问题的，
  //var n = 5e+4;//xe+y x乘以10的y次方 50000
  //var n = 5e-4;//xe+y x乘以10的y次方 0.0005

  //在控制台打印输出其他进制的数字的时候 会转换成十进制的值


6.布尔类型
   ""/0/NaN/null/undefined/false输出结果是错误的，其他的都是正确的，字符串的false是对的，但是变量不加双引号的false是错的

7.数组
  数组中最后一个元素的索引号arr.length-1 数组中元素的个数是arr.length

  //遍历数组的固定格式
    for (var i = 0; i < arr.length; i++) {
        console.log(arr[i]);
    }
    //倒叙遍历
    for (var i = arr.length - 1; i >= 0; i--) {
        console.log(arr[i]);
    }

8.函数的调用
  先看到有函数的调用，才会去找相关的执行的代码。

9.undefined
  1.变量声明了没赋值值是undefined
  2.数组的项 没有值 值是undefined
  3.形参没有接收到值 值是undefined
  4.如果一个函数没有返回值 相当于返回了undefined
  5.对象的属性 没有值 值是undefined
  6.undefined一般都是解析器自动给的，null一般都是我们手动给的

10.值类型和引用类型作参数
   引用类型都是会在栈中存放一个地址，在堆中存放地址对应的数据，当调用时有复制地址的行为，又修改了地址里的数据，那么地址的数据会发生改变。这个情况要视情况而定

   // 值类型: 如果一个变量存储的是值本身
  // 值类型, 包含了: number / string / boolean / null / undefined
  // 引用类型: 如果一个变量存储的是引用(地址), 对象本身是存储在另外一个位置的
		// 			分为两个存储空间: 
		// 					栈中存储的是：地址（引用）
		// 					堆中存储的是：对象本身


11.console.log(arr.valueOf());把数组中的具体的值展示出来
    console.log(arr.toString());//把数组转换成字符串
    console.log(arr.join());//把数组中的每一项取出 并用一个指定的分隔符去拼接
    //如果没有传入分隔符 默认使用,来分割
    console.log(arr.join("|"));
    console.log(arr.join("-"));

12.数组的增删方法
    //console.log(arr.push(0));//从后面添加元素 返回新数组的长度个数
    //console.log(arr.pop());//从后面删除元素 返回被删除的元素
    //console.log(arr.shift());//从前面删除元素 返回被删除的元素
    //console.log(arr.unshift(0));//从前面添加元素 返回新数组的长度个数
    //arr.push(0);//可以加入一个
    //arr.push(0, 0, 0, 0, 0, 0);//也可以加入很多 用逗号隔开
    删除的方法pop和shift都不需要传参，添加的push和unshift都是需要传参的

    arr.slice(开始位置，结束位置);
    //开始位置能取到，结束位置取不到；
    //slice()从当前数组中把要的东西复制一份，不影响原来的数组

    //splice()//删除或替换当前数组的某些项目
    第一个参数是从哪个位置开始删除，第二个参数是要删除的个数，第三个参数是指添加的元素；添加的元素是放在删除的元素的位置；splice()会改变原数组；

    concat();数组拼接方法；
    var arr = [1, 2, 3];
    //var newArr = arr.concat(0, 0, 0, 0);
    var newArr = arr.concat([0, 0, 0, 0]);
    console.log(newArr);

    reverse();翻转数组
    sort();数组排序:只判断第一位数的大小，十位数以内的可以正确排序，但是十位数以上就不对了

13.位置方法 
	找数组中第一次出现元素的索引：indexOf();
	找元素中最后一次出现元素的索引：lastIndexOf();
	//第二个参数 表示从哪里开始找
	console.log(arr.indexOf("a", 0));//如果不传入第二个参数 相当于从0开始
	console.log(arr.indexOf("a", 1));//找的时候 从这一项开始找 包括这一项
	console.log(arr.indexOf("a", 2));//找的时候 从这一项开始找 包括这一项
	console.log(arr.indexOf("o"));//-1 如果找不到 返回-1

14.过滤数组
   var newArr = arr.filter(function(element,index,array){
   		//返回true表示保留该元素，false则不保留
   		if(element > 1500){
   			return false
   		}
   		return true
   })
   console.log(newArr) ;

15.匿名函数
   没有命名的函数：一般用于绑定事件的时候

   递归调用
   函数在自身内部调用自身的方法就是递归：一般都要有结束的条件，不然就是死递归

   回调函数
   被当成参数传递的函数就是回调函数

   清空数组
   arr.splice(0 , arr.length) ;删除数组中所有的元素
   arr.length = 0 ;//length属性可以赋值
   arr = [] ;//这种方式是推荐使用的

16.数组的排序
	var arr = [11, 2, 3, 1, 99, 80, 66, 555];

    arr.sort(function (a, b) {
        //如果返回了一个值>0的时候，就要做交换, <= 不做交换
        return a - b;

    });
    console.log(arr);
	

    将字符串数组按照字符长度从小到大排列
	var arr = ["a", "bb","dddd","ccc"];
	arr.sort(function (a, b) {
	return b.length -  a.length;
	  });
	console.log(arr);


    //将学生数组按照年龄从小到大排列
    var arr = [
        {name:"zs",age:18},
        {name:"ls",age:25},
        {name:"ww",age:60},
        {name:"cc",age:15},
        {name:"wq",age:16}
    ];

    arr.sort(function (a, b) {
        return a.age - b.age;
    });
    console.log(arr);


17.数组去重
	 //var arr = ["a", "a", "z", "a", "x", "a", "a", "z", "c", "x", "a", "x"];
    //找到数组中第一个a出现的位置
    //console.log(arr.indexOf("a"));
    //找到数组中最后一个a出现的位置
    //console.log(arr.lastIndexOf("a"));

    //数组去重，返回一个新数组 ["c", "a", "z", "x"]
//    var newArr = [];
//    for(var i = 0; i < arr.length;i++) {
//        var temp = arr[i];
//        //判断temp在新数组里面有还是没有，如果没有，就添加到新数组里面，如果有，不管
//        if(newArr.indexOf(temp) == -1){
//            //说明新数组里面没有temp
//            newArr.push(temp);
//        }
//    }
//    console.log(newArr);

//求人任意个数的最大值，不准用max，你自己实现一个max
    //不确定参数个数，可以挖坑
    //arguments对象，把传递的参数全部存下来了。
//    function max(){
//        //console.log(arguments);
//        var temp = arguments[0];
//        for(var i = 0; i < arguments.length; i++) {
//            if(temp < arguments[i]){
//                temp = arguments[i];
//            }
//        }
//        return temp;
//    }
//
//    console.log(max(11, 2, 3, 4, 5, 99,100));


18.获取数组中每个元素出现的次数
    
    //妙用对象
    //c:1
    //a:4
    //z:2
    //x:1

    //想肯定是想不到， 基础对象（对象还是需要掌握）
    var arr = ["c", "a", "z", "a", "x", "a", "a", "z", "c", "x", "a", "x"];


    //判断对象有没有某一个属性
    //取这个属性的值，如果是undefined，说明没有这个属性，如果不是undefined，说明有这个属性

    var obj = {};//创建了一个空对象
    for(var i = 0; i < arr.length;i++) {
        var temp = arr[i];
        //判断对象有没有这个属性，如果有，让值+1,
        //如果没有这个属性，我就让对象添加这个属性，值为1
        if(obj[temp] == undefined){
            //说明对象没有这个属性
            obj[temp] = 1;//给对象添加了一个属性
        }else {
            //对象有这个属性,就让属性值+1
            obj[temp] = obj[temp] + 1;
        }
    }
    console.log(obj);


19.split方法 和join方法
	var str = "abc|bcd|cde|eee";
    var arr = str.split("|");//把字符串切割成数组
    console.log(arr);

    var str = arr.join("|");
    console.log(str);//把数组转换成字符串


20.字符串和数组的一些方法
	 //截取字符串"我爱中华人民共和国"，中的"中华"
    //var str = "我爱中华人民共和国";
    //console.log(str.substr(2, 2));

    //"abcoefoxyozzopp"查找字符串中所有o出现的位置
    //    var str = "abcoefoxyozzopp";
    //    for(var i = 0; i < str.length;i++) {
    //        if(str[i] == "o"){
    //            console.log(i);
    //        }
    //    }

    //把字符串中所有的o替换成!
    //    var str = "abcoefoxyozzopp";
    //    str[0] = "1";
    //    console.log(str);
    //    console.log(str.replace(/o/g, "!"));
    //    for(var i = 0; i < str.length;i++) {
    //        if(str[i] == "o") {
    //            str = str.replace("o","!");
    //        }
    //    }
    //    console.log(str);

    //把一个字符串中所有的空格全部去掉
    //    var str = "   aa  dfd  dfkjsldf   kdjflkds    ";
    //    console.log(str.replace(/ /g, ""));


21.内置对象
	 //说出4个常用的内置对象，说出至少5个方法

    //Math        //Math.max  Math.min  Math.ceil Math.floor Math.round Math.pow Math.abs Math.PI

    //Date
        //date.getFullYear date.getMonth  date.getDay date.getDate

    //Array
        // arr.push arr.pop arr.shift arr.unshift arr.join

    // String
        //indexof  lastindexof subStr replace trim


22.循环
	// js中的四种循环：
		// 
		// 1 for 				用来遍历数组
		// 2 for-in			用来遍历对象
		// 3 while 			如果不知道要遍历多少次，就使用while
		// 4 do-while   不管条件是否成立，先执行一次！

		// break 与 continue 的区别：
		// break：		在for循环中，用于跳出循环
		// 	1 在循环中可以使用break
		// 	2 switch-case中也可以使用 break
		// 	
		// continue：	跳出本次循环，进行下一次循环


		// 什么情况能使用 return ？只能在函数中使用
		/*for(var i = 0; i < 10; i++) {
			return; // 会报错！
		}*/


23.in运算符和delete运算符
	// in 运算符：判断对象中是否能够访问到某个属性，如果能访问到就返回	：true，否则就是false
  	// 语法： '属性' in 对象
	// 注意：in运算符只看对象中有没有指定的属性，而不管属性的值！

	// delete 删除
		// 作用： 用于删除对象的属性
		// 语法： delete 对象.属性
	// 对于数组来说，索引号就是键！
	// console.log(0 in arr);
	// 使用delete删除数组的索引号的时候，是不会改变数组长度的！


24.函数的参数：形参和实参


25.# 基本包装类型

	简单数据类型（值类型）

	​	number、string、boolean、null、undefined

	复杂数据类型（引用类型）

	​	Object、Array、Function



	问题1：简单数据类型有属性和方法吗？

	简单数据类型，没有任何的属性和方法的

	复杂数据类型：有属性和方法的



	问题2：给我解释一下  `var str = "abc"; console.log(str.length);`

	因为基本包装类型



	基本包装类型的概念：js为了我们使用字符串方便，在我们使用字符串的时候，可以直接调用字符串的方法，会把字符串包装成一个字符串对象。

	1. 会把根据基本类型创建一个对象  var str = new String("abc");
	2. 返回创建的这个对象对应的结果
	3. 销毁创建出来的这个对象
